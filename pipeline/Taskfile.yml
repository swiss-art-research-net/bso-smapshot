# https://taskfile.dev

version: '3'

vars:
  GENERATOR_POLICY: /mapping/generator-policy.xml

dotenv: ['/dotenv/.env']

tasks:
  run:
    desc: Run entire pipeline
    cmds:
    - task: retrieve-data
    - task: prepare-image-mapping
    - task: perform-image-mapping
    - task: prepare-observation-mapping
    - task: perform-observation-mapping
    - task: ingest-images
    - task: ingest-observations


  ingest-data:
    cmds:
      - |
        echo "Ingesting data into <${{.GRAPH}}> on $ENDPOINT"
        GRAPHURLENCODE=$(echo $(echo ${{.GRAPH}} | sed "s/:/%3A/g") | sed "s/\//%2F/g")
        cat {{.TTL_FOLDER}}/*.ttl > {{.TEMP_FOLDER}}/ingest.ttl
        curl -u "$USERNAME:$PASSWORD" -X PUT -H "Content-Type: text/turtle" --data-binary "@{{.TEMP_FOLDER}}/ingest.ttl" $ENDPOINT?graph=$GRAPHURLENCODE
        rm {{.TEMP_FOLDER}}/ingest.ttl

  ingest-images:
    desc: Ingest the image data into a named graph via the specified SPARQL Graph Store endpoint
    sources:
      - /data/ttl/images/*.ttl
      - /dotenv/.env
    cmds:
      - task: ingest-data
        vars:
          TTL_FOLDER: /data/ttl/images
          TEMP_FOLDER: /data/temp
          GRAPH: GRAPH_IMAGES

  ingest-observations:
    desc: Ingest the observation data into a named graph via the specified SPARQL Graph Store endpoint
    sources:
      - /data/ttl/observations/*.ttl
      - /dotenv/.env
    cmds:
      - task: ingest-data
        vars:
          TTL_FOLDER: /data/ttl/observations
          TEMP_FOLDER: /data/temp
          GRAPH: GRAPH_OBSERVATIONS
        

  retrieve-data:
    desc: Download the detailed data for all validated images and observations in the SARI/BSO collection into the `/data/*` folders. The data is converted to XML for later mapping using the X3ML Mapping Engine.
    cmds:
      - python retrieve-smapshot-data.py

  prepare-mapping:
    cmds:
      - rm -rf {{.TEMP_FOLDER}}
      - mkdir -p {{.TEMP_FOLDER}}
      - |
        MAPPED_FILES=$(ls -1 {{.OUTPUT_FOLDER}} | sed s/.ttl//g)
        for l in $(ls -1 {{.INPUT_FOLDER}} | sed s/.xml//g); do 
          if [[ ! $MAPPED_FILES =~ (^|[[:space:]])$l($|[[:space:]]) ]]; then
            cp "{{.INPUT_FOLDER}}/$l.xml" "{{.TEMP_FOLDER}}/$l.xml"
          fi
        done

  prepare-image-mapping:
    desc: Compare the retrieved XML files with the mapped TTL files and copy all unconverted XML files to a temporary folder.
    sources:
      - /data/xml/images/*.xml
      - /data/ttl/images/*.ttl
    cmds:
      - task: prepare-mapping
        vars:
          INPUT_FOLDER: /data/xml/images
          OUTPUT_FOLDER: /data/ttl/images
          TEMP_FOLDER: /data/temp/images

  prepare-observation-mapping:
    desc: Compare the retrieved XML files with the mapped TTL files and copy all unconverted XML files to a temporary folder.
    sources:
      - /data/xml/observations/*.xml
      - /data/ttl/observations/*.ttl
    cmds:
      - task: prepare-mapping
        vars:
          INPUT_FOLDER: /data/xml/observations
          OUTPUT_FOLDER: /data/ttl/observations
          TEMP_FOLDER: /data/temp/observations

  perform-image-mapping:
    desc: Map Smapshot XML data in the temporary folder to CIDOC/RDF
    status:
      - test {{.INPUT_FOLDER}}/*.xml
    sources:
      - /data/temp/images/*.xml
      - /mapping/mapping-smapshot-images.x3ml
    generates:
      - /data/ttl/images/*.ttl
    cmds:
      - task: perform-mapping
        vars:
          INPUT_FOLDER: /data/temp/images
          OUTPUT_FOLDER: /data/ttl/images
          MAPPING_FILE: /mapping/mapping-smapshot-images.x3ml
          BATCHSIZE: 1

  perform-observation-mapping:
    desc: Map Smapshot XML data in the temporary folder to CIDOC/RDF
    status:
      - test {{.INPUT_FOLDER}}/*.xml
    sources:
      - /data/temp/observations/*.xml
      - /mapping/mapping-smapshot-observations.x3ml
    generates:
      - /data/ttl/observations/*.ttl
    cmds:
      - task: perform-mapping
        vars:
          INPUT_FOLDER: /data/temp/observations
          OUTPUT_FOLDER: /data/ttl/observations
          MAPPING_FILE: /mapping/mapping-smapshot-observations.x3ml
          BATCHSIZE: 1

  perform-mapping:
    cmds:
      - bash /pipeline/performMapping.sh -i {{.INPUT_FOLDER}} -o {{.OUTPUT_FOLDER}} -m {{.MAPPING_FILE}} -g {{.GENERATOR_POLICY}} -b {{.BATCHSIZE}}
